<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风吹雪</title>
  <subtitle>IT &amp; 生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://viennadd.github.io/"/>
  <updated>2016-03-23T09:43:37.000Z</updated>
  <id>http://viennadd.github.io/</id>
  
  <author>
    <name>vienna</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>非基于比较的排序算法</title>
    <link href="http://viennadd.github.io/2016/03/21/%E9%9D%9E%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E6%8E%92%E5%BA%8F/"/>
    <id>http://viennadd.github.io/2016/03/21/非基于比较排序/</id>
    <published>2016-03-21T15:42:16.000Z</published>
    <updated>2016-03-23T09:43:37.000Z</updated>
    
    <content type="html">&lt;p&gt;计数排序(Counting Sort)、桶排序、基数排序三个已经有不少很好的博客文章介绍，但不自己尝试描述一遍就难以熟悉，权当记录。&lt;/p&gt;
&lt;p&gt;参考了 &lt;a href=&quot;http://www.cnblogs.com/ttltry-air/archive/2012/08/04/2623302.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计数排序，基数排序和桶排序&lt;/a&gt; 和 &lt;a href=&quot;https://www.byvoid.com/blog/sort-radix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三种线性排序算法 计数排序、桶排序与基数排序&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;计数排序&quot;&gt;计数排序&lt;/h3&gt;&lt;p&gt;首先是主要的步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备线性表字典 Dict[], 其长度 m 是待排序元素的范围, 换言之每个待排序的元素都能在这个字典找到对应的位置&lt;/li&gt;
&lt;li&gt;扫描长度为 n 的待排序表 Unordered[], 把每个元素的出现次数记录在 Dict 里&lt;/li&gt;
&lt;li&gt;现在 Dict 记录着每个元素的的出现次数, 而 Dict 本身是有序的&lt;/li&gt;
&lt;li&gt;给 Dict 做累加, Dict[i] += Dict[i - 1] for i in 1 to m, &lt;/li&gt;
&lt;li&gt;累加后字典的值指定了元素排序后的位置，反向遍历待排序的A, 结合指定了元素位置的字典C 则可生成有序结果, 而反向遍历的元素会放在更后的位置, 这特性确保这是稳定排序&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C 语言例子&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *A, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\t&quot;&lt;/span&gt;, A[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CountingSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *A, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *C, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *Order)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Original Data: \n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PrintArray(A, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// initialize Dict&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// memset(C, 0, m * sizeof(m)); 这行居然导致代码着色失效, 不用括号包着 m 则问题解决，着实诡异。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(C, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, m * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// counting element of A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        C[A[i]]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Dict: Before Accumulate\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PrintArray(C, m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// scan C, accumulate,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 累加后, C 字典里的值就是 元素有序后的位置, 因为每次取得和占用位置后应该减一, 使用字典C 逆遍历A 就可以保持稳定而有序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; m; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        C[i] += C[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Dict: After Accumulate\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PrintArray(C, m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// reverse filling result, stable sort&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Order[C[A[i]]] = A[i]; &lt;span class=&quot;comment&quot;&gt;// 根据字典 C 得知 A[i] 的位置（累加后的C 的值x : 前面有x个值比我小 )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        C[A[i]]--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Sorted Array:\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PrintArray(Order, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; K = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// maximum in range, size of C&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// size of A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; A[N] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; C[K + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; Order[N]; &lt;span class=&quot;comment&quot;&gt;// result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        A[i] = rand() % K;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CountingSort(A, N, C, K, Order);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;桶排序_(Bucket_Sort)&quot;&gt;桶排序 (Bucket Sort)&lt;/h3&gt;&lt;p&gt;在观看&lt;a href=&quot;http://www.cs.usfca.edu/~galles/visualization/BucketSort.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cs.usfca.edu/~galles/visualization/BucketSort.html&lt;/a&gt; 后, 感觉桶排序就像散列表，然后加入了顺序的想法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;过程与计数排序的部分步骤相近, 建立 Dict 字典用以储存元素的出现情况, Dict 其实可以是线性表或者散列表, 看需求; 而本来在计数排序中的计数步骤这里则类似是散列表的 Chaining&lt;/li&gt;
&lt;li&gt;对字典项的 Chaining 进行排序, 字典是有序的, Chaining 也变成有序, 扫描一次把元素读取出来就完成排序了&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;基数排序_(Radix_Sort)&quot;&gt;基数排序 (Radix Sort)&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;计数排序(Counting Sort)、桶排序、基数排序三个已经有不少很好的博客文章介绍，但不自己尝试描述一遍就难以熟悉，权当记录。&lt;/p&gt;
&lt;p&gt;参考了 &lt;a href=&quot;http://www.cnblogs.com/ttltry-air/archive/2012/08/04/2623302.html&quot;&gt;计数排序，基数排序和桶排序&lt;/a&gt; 和 &lt;a href=&quot;https://www.byvoid.com/blog/sort-radix&quot;&gt;三种线性排序算法 计数排序、桶排序与基数排序&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://viennadd.github.io/categories/Tech-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>最近看的剧</title>
    <link href="http://viennadd.github.io/2016/03/11/%E6%9C%80%E8%BF%91%E7%9C%8B%E7%9A%84%E5%89%A7/"/>
    <id>http://viennadd.github.io/2016/03/11/最近看的剧/</id>
    <published>2016-03-11T13:35:11.000Z</published>
    <updated>2016-03-23T09:41:40.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/img/最近看的剧/rewalkinpark.jpg&quot; alt=&quot;如晴天似雨天&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;电影&quot;&gt;电影&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Like Sunday Like Rain&lt;/strong&gt;&lt;br&gt;剧情轻松、吸引、感人、画面唯美、女主漂亮&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向阳处的她&lt;/strong&gt;&lt;br&gt;刷上野树里系列之一，初恋的感觉，女主漂亮&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;恐怖直播&lt;/strong&gt;&lt;br&gt;低成本紧凑紧张悬疑故事，的确无尿点但并不能说很吸引&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;老男孩&lt;/strong&gt;&lt;br&gt;吸引、悬疑、人性、情色、暴力&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大叔&lt;/strong&gt;&lt;br&gt;特工剧，动作、剧情安排都不错，喜爱特工题材的推荐特工经典《谍影重重》&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;热血警探&lt;/strong&gt;&lt;br&gt;打发时间、喜剧，带上爆谷可乐休息一下吧&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;盗钥匙的方法&lt;/strong&gt;&lt;br&gt;打发时间、喜剧，良伴于无眠之夜&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;电视剧&quot;&gt;电视剧&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Dr.伦太郎&lt;/strong&gt;&lt;br&gt;堺雅人/苍井优，关于精神健康，每个人都有病系列，整体还不错，女主母亲演得杠杠的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;胜者即正义 Legal High&lt;/strong&gt;&lt;br&gt;堺雅人/新垣结衣，喜剧，它的信条看你信不信了，打发时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;求婚大作战&lt;/strong&gt;&lt;br&gt;山下智久/长泽雅美，貌似当年在内地也是热潮，初恋的感觉&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后的朋友&lt;/strong&gt;&lt;br&gt;围绕几个同伴关系的故事，男主暴力时间得快进，好评，女二神演技&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交响情人梦&lt;/strong&gt;&lt;br&gt;玉木宏/上野树里，如果可以接受这种风格的话，电视剧要和SP 一起看了才完整，女主神演技&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;家族的形式&lt;/strong&gt;&lt;br&gt;香取慎吾/上野树里，还在连载中，就是个电视剧，我就是去看女主的，一集突然就看完了，不知道什么吸引就被吸引了&lt;br&gt;刚刚完结，好评&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;琅琊榜&lt;/strong&gt;&lt;br&gt;胡歌，国产良心，就是集数有点多，只是故事长了变成打发时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;太阳的后裔&lt;/strong&gt;&lt;br&gt;宋钟基/宋慧乔，还在连载中，已经是近年韩国爱情剧最好，所谓”势均力敌”的爱情&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;秘密花园&lt;/strong&gt;&lt;br&gt;可算当年第一套韩剧，难免有些俗套剧情，但整体安排很不错，那种一见钟情，中段吸引，后段感人&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/最近看的剧/rewalkinpark.jpg&quot; alt=&quot;如晴天似雨天&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;电影&quot;&gt;电影&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Like Sunday Like Rain&lt;/strong&gt;&lt;br&gt;剧情轻松、吸引、感人、画面唯美、女主漂亮&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向阳处的她&lt;/strong&gt;&lt;br&gt;刷上野树里系列之一，初恋的感觉，女主漂亮&lt;br&gt;
    
    </summary>
    
      <category term="TV Series" scheme="http://viennadd.github.io/categories/TV-Series/"/>
    
    
  </entry>
  
  <entry>
    <title>the lost honour of christopher jefferies</title>
    <link href="http://viennadd.github.io/2015/12/19/the-lost-honour-of-christopher-jefferies/"/>
    <id>http://viennadd.github.io/2015/12/19/the-lost-honour-of-christopher-jefferies/</id>
    <published>2015-12-19T15:17:57.000Z</published>
    <updated>2016-03-23T09:39:45.000Z</updated>
    
    <content type="html">&lt;p&gt;剧情、人物、画面、节奏、配乐皆好&lt;/p&gt;
&lt;p&gt;主角是个纯粹( with honour )的人，与之对比的是大众和媒体的『正常』&lt;/p&gt;
&lt;p&gt;没有典型的紧张紧凑，自然就引人投入&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;剧情、人物、画面、节奏、配乐皆好&lt;/p&gt;
&lt;p&gt;主角是个纯粹( with honour )的人，与之对比的是大众和媒体的『正常』&lt;/p&gt;
&lt;p&gt;没有典型的紧张紧凑，自然就引人投入&lt;/p&gt;

    
    </summary>
    
      <category term="TV Series" scheme="http://viennadd.github.io/categories/TV-Series/"/>
    
    
  </entry>
  
  <entry>
    <title>捣腾博客的中文字体</title>
    <link href="http://viennadd.github.io/2015/09/26/%E6%8D%A3%E8%85%BE%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/"/>
    <id>http://viennadd.github.io/2015/09/26/捣腾博客的中文字体/</id>
    <published>2015-09-26T13:12:51.000Z</published>
    <updated>2015-12-19T15:57:46.000Z</updated>
    
    <content type="html">&lt;p&gt;中文字体文件体积巨大，通常站长并不会把完整的中文字体文件加入网站当中&lt;/p&gt;
&lt;p&gt;如果想给中文内容套上一个漂亮的字体，现在似乎做法是使用 &lt;a href=&quot;http://ecomfe.github.io/fontmin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fontmin&lt;/a&gt; 生成一个字体文件子集来解决体积过大的问题&lt;/p&gt;
&lt;p&gt;首先用正则 [\u4e00-\u9fa5] 匹配出所有 HTML 文件的中文字符&lt;/p&gt;
&lt;p&gt;然后使用 fontmin 生成只包含用到的字符，体积就会小很多&lt;/p&gt;
&lt;p&gt;嗯，写个脚本搞成一个命令，然后加到博客生成的过程中就易用多了  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;中文字体文件体积巨大，通常站长并不会把完整的中文字体文件加入网站当中&lt;/p&gt;
&lt;p&gt;如果想给中文内容套上一个漂亮的字体，现在似乎做法是使用 &lt;a href=&quot;http://ecomfe.github.io/fontmin/&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
      <category term="Tech Notes" scheme="http://viennadd.github.io/categories/Tech-Notes/"/>
    
    
  </entry>
  
</feed>
