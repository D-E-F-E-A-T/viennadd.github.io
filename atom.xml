<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风吹雪</title>
  <subtitle>IT &amp; 生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dd3.org/"/>
  <updated>2017-07-29T15:41:35.000Z</updated>
  <id>http://dd3.org/</id>
  
  <author>
    <name>vienna</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>韩剧《记忆》</title>
    <link href="http://dd3.org/2017/07/29/%E9%9F%A9%E5%89%A7%E3%80%8A%E8%AE%B0%E5%BF%86%E3%80%8B/"/>
    <id>http://dd3.org/2017/07/29/韩剧《记忆》/</id>
    <published>2017-07-29T14:42:00.000Z</published>
    <updated>2017-07-29T15:41:35.000Z</updated>
    
    <content type="html">&lt;p&gt;『请用尽全力去幸福吧』，剧末的最后一句话。&lt;/p&gt;
&lt;p&gt;韩剧的绝症套路吗？能打动人就好。话说看着这剧想到的诺奖得主高锟，同样的疾病。噢原来从知道高锟这个人到现在过好些年了。。&lt;/p&gt;
&lt;p&gt;剧中开始部分主角约了家人，但到达后却忘了位置，大概就是无助急切时的样子？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/韩剧《记忆》/memory.jpg&quot; alt=&quot;剧中主角朴泰硕&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;『请用尽全力去幸福吧』，剧末的最后一句话。&lt;/p&gt;
&lt;p&gt;韩剧的绝症套路吗？能打动人就好。话说看着这剧想到的诺奖得主高锟，同样的疾病。噢原来从知道高锟这个人到现在过好些年了。。&lt;/p&gt;
&lt;p&gt;剧中开始部分主角约了家人，但到达后却忘了位置，大概就是无助急切时的样子？&lt;/p&gt;

    
    </summary>
    
      <category term="Drama" scheme="http://dd3.org/categories/Drama/"/>
    
    
      <category term="未生" scheme="http://dd3.org/tags/%E6%9C%AA%E7%94%9F/"/>
    
      <category term="韩剧" scheme="http://dd3.org/tags/%E9%9F%A9%E5%89%A7/"/>
    
      <category term="围棋" scheme="http://dd3.org/tags/%E5%9B%B4%E6%A3%8B/"/>
    
  </entry>
  
  <entry>
    <title>刚刚看了《海边的曼切斯特》</title>
    <link href="http://dd3.org/2017/03/04/%E5%88%9A%E5%88%9A%E7%9C%8B%E4%BA%86%E3%80%8A%E6%B5%B7%E8%BE%B9%E7%9A%84%E6%9B%BC%E5%88%87%E6%96%AF%E7%89%B9%E3%80%8B/"/>
    <id>http://dd3.org/2017/03/04/刚刚看了《海边的曼切斯特》/</id>
    <published>2017-03-04T13:00:45.000Z</published>
    <updated>2017-03-04T14:09:36.000Z</updated>
    
    <content type="html">&lt;p&gt;略闻获奥斯卡不知道什么奖，电影名字不错，就看了。&lt;br&gt;剧情顺畅平凡打动观众，看着男主的行为观众也被牵动代入剧中。各个角色的性格表现安排也合适出色。  &lt;/p&gt;
&lt;p&gt;整个片子的呈现，拿捏很好。留意片子每个细节每个小动作吧，嗯&lt;/p&gt;
&lt;p&gt;Manchester by the Sea&lt;br&gt;2017.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/Manchester_By_The_Sea/theboat.png&quot; alt=&quot;Manchester By The Sea&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;略闻获奥斯卡不知道什么奖，电影名字不错，就看了。&lt;br&gt;剧情顺畅平凡打动观众，看着男主的行为观众也被牵动代入剧中。各个角色的性格表现安排也合适出色。  &lt;/p&gt;
&lt;p&gt;整个片子的呈现，拿捏很好。留意片子每个细节每个小动作吧，嗯&lt;/p&gt;
&lt;p&gt;Manchester by th
    
    </summary>
    
      <category term="Drama" scheme="http://dd3.org/categories/Drama/"/>
    
    
      <category term="电影" scheme="http://dd3.org/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="剧情" scheme="http://dd3.org/tags/%E5%89%A7%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>成功把门禁的 NFC UID 复制到手机</title>
    <link href="http://dd3.org/2017/03/01/%E6%88%90%E5%8A%9F%E6%8A%8A%E9%97%A8%E7%A6%81%E7%9A%84-NFC-UID-%E5%A4%8D%E5%88%B6%E5%88%B0%E6%89%8B%E6%9C%BA/"/>
    <id>http://dd3.org/2017/03/01/成功把门禁的-NFC-UID-复制到手机/</id>
    <published>2017-02-28T16:35:10.000Z</published>
    <updated>2017-02-28T16:54:25.000Z</updated>
    
    <content type="html">&lt;p&gt;其实就是照着 &lt;a href=&quot;http://www.freebuf.com/news/topnews/80368.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何利用Nexus 5伪造一张门禁卡&lt;/a&gt; 和 &lt;a href=&quot;http://www.enjoydiy.com/3539.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;修改NFC手机的默认UID&lt;/a&gt; 搞就行。&lt;br&gt;楼层里发现原始来源：&lt;a href=&quot;http://stackoverflow.com/questions/28409934/editing-functionality-of-host-card-emulation-in-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/28409934/editing-functionality-of-host-card-emulation-in-android&lt;/a&gt;，厉害了&lt;/p&gt;
&lt;p&gt;最近因为要提取 WIFI 密码而把手机 root 了，也用了有些年了，保修早就过了。正好手上有个门禁卡，也刚好再需要多一个，就把留在脑袋的一丝印象捞出来玩玩。&lt;/p&gt;
&lt;p&gt;第一次漏了长度字节没加上，不成功之余，手机的 NFC 功能也不能工作，一度以为不兼容搞不定。后来发现后加上漏掉的一字节就好了。&lt;/p&gt;
&lt;p&gt;虽然只能复制 Mifare M1 的 UID，但在我的情况里就已经够用了。其实x宝也是三四十块钱就能买一个简易的复制工具（需要配套可写 UID 的 NFC Tag）。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;其实就是照着 &lt;a href=&quot;http://www.freebuf.com/news/topnews/80368.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何利用Nexus 5伪造一张门禁卡&lt;/a&gt; 和 &lt;a href=&quot;http://w
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
      <category term="NFC" scheme="http://dd3.org/tags/NFC/"/>
    
      <category term="Android" scheme="http://dd3.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>2017 Happy New Year! 新年好</title>
    <link href="http://dd3.org/2017/01/01/2017-Happy-New-Year-%E6%96%B0%E5%B9%B4%E5%A5%BD/"/>
    <id>http://dd3.org/2017/01/01/2017-Happy-New-Year-新年好/</id>
    <published>2016-12-31T16:14:42.000Z</published>
    <updated>2017-01-01T06:01:45.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;去年&quot;&gt;去年&lt;/h2&gt;&lt;p&gt;年初的记忆已经模糊，应该是和学业有关的事情。似乎曾有一段&lt;a href=&quot;https://dd3.org/archives/2016/03/&quot;&gt;看剧的日子&lt;/a&gt;。  &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;五六月推测是毕设提交期，最后也就那样了，导师 Oliver 是个好人，去年没选错毕设课题。&lt;br&gt;在考完试后，我的大学时光也要完结。 OUHK 收了不是优秀学生的我，到现在毕业，我觉得 OU 的教育是有意义的，遇到的教授同学，嗯。  2016 是压抑和兴奋的一年，虽然其中有几个月比较沉寂，但我应该会记得 2016 的事情。 &lt;/p&gt;
&lt;p&gt;六月到了杭州，之后变成一场旅行。 在杭州见了表哥，也谈了各种东西，像是认识了一个朋友。 &lt;/p&gt;
&lt;p&gt;流连杭州时在群主家中做客，群主壕人，每每请吃，我都不好意思然后就吃了。 期间又一好朋友来作客，然后我们又去吃。写到这里，又记起一起看电影的画面。 杭州很好，人与风景。之后在上海见了 IB，当晚下雨。  &lt;/p&gt;
&lt;p&gt;之后迎来了工作，此时已经入职一段时间。&lt;/p&gt;
&lt;h2 id=&quot;今年&quot;&gt;今年&lt;/h2&gt;&lt;p&gt;好, 那就新年快乐！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;去年&quot;&gt;去年&lt;/h2&gt;&lt;p&gt;年初的记忆已经模糊，应该是和学业有关的事情。似乎曾有一段&lt;a href=&quot;https://dd3.org/archives/2016/03/&quot;&gt;看剧的日子&lt;/a&gt;。
    
    </summary>
    
      <category term="生活" scheme="http://dd3.org/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>重新对博客启用 HTTPS</title>
    <link href="http://dd3.org/2016/12/31/%E9%87%8D%E6%96%B0%E5%AF%B9%E5%8D%9A%E5%AE%A2%E5%90%AF%E7%94%A8-HTTPS/"/>
    <id>http://dd3.org/2016/12/31/重新对博客启用-HTTPS/</id>
    <published>2016-12-31T12:30:57.000Z</published>
    <updated>2016-12-31T12:42:13.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.cloudflare.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cloudflare&lt;/a&gt; 提供 DNS 解析服务，其中免费 Plan 包含 HTTPS 支持，遂把 DNS 转移，就这样。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.cloudflare.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cloudflare&lt;/a&gt; 提供 DNS 解析服务，其中免费 Plan 包含 HTTPS 支持，遂把 DNS 转移，就这样。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 挺好用的</title>
    <link href="http://dd3.org/2016/11/19/Visual-Studio-Code-%E6%8C%BA%E5%A5%BD%E7%94%A8%E7%9A%84/"/>
    <id>http://dd3.org/2016/11/19/Visual-Studio-Code-挺好用的/</id>
    <published>2016-11-19T06:15:30.000Z</published>
    <updated>2016-12-31T12:29:55.000Z</updated>
    
    <content type="html">&lt;p&gt;我在 macOS 上要开发一些简单的 C/C++, 不想要完备的 IDE, 一个编辑器就很方便。 &lt;/p&gt;
&lt;p&gt;可是我还想要一些有用的开发插件例如智能代码提示、智能引用、快捷键构建之类。&lt;br&gt;这些功能其实任何编辑器依靠广大群众的智慧也有各种好的解决方案，VCS 则是更简单就可以配置到足够好，而且免费。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;刚安装好的 VCS 就已经带备 Git 插件，常用的 Commit 和 Push 等都可以直接 GUI 操作。&lt;br&gt;往 Marketplace 搜索安装安装 vim, cpptools, clang 之类都是简单操作，youcompleteme 则需要现在外部完成安装。&lt;br&gt;如果打开的是一个文件夹，则可以新建.vscode 文件夹存放项目配置，比如 include path，获取更全面的cross reference  &lt;/p&gt;
&lt;p&gt;总的来说很配合暂时的需求，体验不错。&lt;br&gt;此处应该有些图。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我在 macOS 上要开发一些简单的 C/C++, 不想要完备的 IDE, 一个编辑器就很方便。 &lt;/p&gt;
&lt;p&gt;可是我还想要一些有用的开发插件例如智能代码提示、智能引用、快捷键构建之类。&lt;br&gt;这些功能其实任何编辑器依靠广大群众的智慧也有各种好的解决方案，VCS 则是更简单就可以配置到足够好，而且免费。&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>这样理解 Python 闭包</title>
    <link href="http://dd3.org/2016/08/23/%E8%BF%99%E6%A0%B7%E7%90%86%E8%A7%A3-Python-%E9%97%AD%E5%8C%85/"/>
    <id>http://dd3.org/2016/08/23/这样理解-Python-闭包/</id>
    <published>2016-08-23T13:02:36.000Z</published>
    <updated>2016-08-23T13:50:20.000Z</updated>
    
    <content type="html">&lt;p&gt;看了 &lt;a href=&quot;http://python.jobbole.com/81683/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;12 步轻松搞定 python 装饰器&lt;/a&gt; 里的描述后，对『closure 是上下文』有了些形象的理解，一些应用了 closure 的实践可以参考文章里的一些例子，例如函数参数定制生成，装饰器功能等&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;g_var = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    loc_var = &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;I can access g_var: %s, loc_var: %s&#39;&lt;/span&gt; % (g_var, loc_var))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inner&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;in_fun = outer()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 内层使用到的[外层函数的本地变量]会加入到 func 对象的 __closure__ tuple 里面&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(in_fun.__closure__)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 全局变量不包含在 closure tuple，并不是副本&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;g_var = &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 效果就是 in_fun 本身函数内的代码，加上 __closure__ 里的上下文副本实现了 closure 功能&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;in_fun()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 也就是说 __closure__ tuple 包含一个 cell 元素，cell 装有外层的 loc_var，值是 30&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;There is %d cell inside&#39;&lt;/span&gt; % len(in_fun.__closure__))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;This cell contain %d&#39;&lt;/span&gt; % in_fun.__closure__[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].cell_contents)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;看了 &lt;a href=&quot;http://python.jobbole.com/81683/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;12 步轻松搞定 python 装饰器&lt;/a&gt; 里的描述后，对『closure 是上下文』有了些形象的理解，一些应用了 
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
      <category term="Python" scheme="http://dd3.org/tags/Python/"/>
    
      <category term="closure" scheme="http://dd3.org/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>shellman 一个 Linux 堆溢出利用例题的分析</title>
    <link href="http://dd3.org/2016/07/21/shellman-%E4%B8%80%E4%B8%AA-Linux-%E5%A0%86%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8%E4%BE%8B%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90/"/>
    <id>http://dd3.org/2016/07/21/shellman-一个-Linux-堆溢出利用例题的分析/</id>
    <published>2016-07-21T08:43:00.000Z</published>
    <updated>2016-07-21T09:15:20.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;ALARM_signal_自动退出程序&quot;&gt;ALARM signal 自动退出程序&lt;/h2&gt;&lt;p&gt;首先把玩一下，发现有个 alarm 事件令程序在一分钟后退出，这里在二进制修改一下时间值去掉这个小玩意，并不会影响后续堆溢出的分析。&lt;/p&gt;
&lt;p&gt;时间值在 main 函数上作为立即数传给 alarm，用 IDA 或别的反汇编工具可以看到&lt;br&gt;一时间没有好用的二进制编辑，发现用 vi 也非常方便&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/22281280/answer/34778466&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/22281280/answer/34778466&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/shellman_分析/alarm.png&quot; alt=&quot;ALARM signal 时长&quot;&gt;&lt;/p&gt;
&lt;p&gt;之后的动态分析会用这个修改过的 shellman_noalarm 就不会一分钟后退出，看了网上一些介绍 gdb 可以屏蔽 ALARM signal， 也是可行方法吧。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;用_IDA_了解关键功能和资料&quot;&gt;用 IDA 了解关键功能和资料&lt;/h2&gt;&lt;p&gt;** 大多数小笔记注释在 IDA 的数据库文件上&lt;/p&gt;
&lt;h4 id=&quot;新增条目&quot;&gt;新增条目&lt;/h4&gt;&lt;p&gt;新增 shellcode，分配内存后会按输入的 size 准确地接收输入并填充&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/shellman_分析/new_size.png&quot; alt=&quot;新 shellcode 的 size&quot;&gt;&lt;/p&gt;
&lt;p&gt;在新增 shellcode 的这个函数里，可以发现总 shellcode 的 counter 全局变量和一个全局数组用来储存每条 record 的资料。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/shellman_分析/new_struct.png&quot; alt=&quot;全局 struct 数组&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个全局数组是这次利用的关键之一，从 IDA 上看还可以知道&lt;br&gt;数组起始地址：0x6016C0&lt;br&gt;新增条目时循环256 次检查有没有空位，意味着是个 size = 256 的数组&lt;br&gt;按新增条目的代码来看，结构是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; record {
    QWORD is_allocated;
    QWORD length;
    QWORD malloc_ptr;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/img/shellman_分析/new_struct2.png&quot; alt=&quot;全局 struct 数组&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;删除条目&quot;&gt;删除条目&lt;/h4&gt;&lt;p&gt;按输入的 index 从全局数组中找到 record，检查是否已分配状态，如果是就进行一段重设和 free 掉内存&lt;/p&gt;
&lt;h4 id=&quot;编辑条目&quot;&gt;编辑条目&lt;/h4&gt;&lt;p&gt;漏洞出现在这个功能里面。&lt;br&gt;获取到条目的数据地址和准备要编辑的长度后，不做任何内存重新分配直接在原地址上按新的数据长度读入数据，这里造成可以覆盖下一个 chunk 的 metadata 进而利用漏洞。&lt;/p&gt;
&lt;h2 id=&quot;漏洞利用&quot;&gt;漏洞利用&lt;/h2&gt;&lt;p&gt;这是典型的 unsafe_unlink 情况，参考了&lt;br&gt;&lt;a href=&quot;https://github.com/shellphish/how2heap/blob/master/unsafe_unlink.c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/shellphish/how2heap/blob/master/unsafe_unlink.c&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://winesap.logdown.com/posts/258859-0ctf-2015-freenote-write-up&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://winesap.logdown.com/posts/258859-0ctf-2015-freenote-write-up&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新增3项条目，都是128 bytes 大小，因为小过128 的话 malloc 不会从 top chunk 上分割，分配出来的 chunk 就不是连续的&lt;/p&gt;
&lt;h4 id=&quot;欺骗第二项让其和假的_chunk_进行合并&quot;&gt;欺骗第二项让其和假的 chunk 进行合并&lt;/h4&gt;&lt;p&gt;编辑第一项时覆盖第二项的 metadata ，包括精心设计的 prev_size 和 inuse 标志位&lt;/p&gt;
&lt;p&gt;按照 libc 的 P-&amp;gt;fd-&amp;gt;bk == P &amp;amp;&amp;amp; P-&amp;gt;bk-&amp;gt;fd ==P 特性的检查，&lt;/p&gt;
&lt;p&gt;P-&amp;gt;fd == P – 24,, P-&amp;gt;bk == P-16 (bk 和 fd 分别是第四个和第三个结构位置)&lt;/p&gt;
&lt;p&gt;为了满足这个检测，需要一个指向假 chunk 的已知位置，所以前面说那个全局数组是这种堆溢出利用关键之处。&lt;/p&gt;
&lt;p&gt;全局数组[0].malloc_ptr 已经指向伪造 chunk 的首地址，那按上面说的布置一下内容，把 P- 24 的值放到伪 chunk 的 bk 处，P-16 的值放到伪 chunk 的 fd 处，要覆盖的第二项里的 prev_size 本来是0x80 + 0x10 (内存大小和 metadata 大小)，现在缩小一下把 prev_size 覆盖成0x80 让第二项以为前面有0x80 bytes 空闲块。&lt;/p&gt;
&lt;p&gt;删掉第二项触发 free –&amp;gt; 触发 unlink&lt;/p&gt;
&lt;p&gt;P-&amp;gt;fd-&amp;gt;bk  = P-&amp;gt;bk   // 双向链表的 node 删除，但这里P-&amp;gt;fd-&amp;gt;bk  就是项目一在数组上存着的地址，就是全局数组[0].malloc_ptr 的值，现在被替换成 &amp;amp;全局数组[0].malloc_ptr – 3 了，我们依然可以编辑项目一的内容，程序会从&amp;amp;全局数组[0].malloc_ptr – 3 处开始读写。&lt;/p&gt;
&lt;p&gt;至此我们可以控制关键的全局数组的内容，达至任意地址读写。&lt;/p&gt;
&lt;h4 id=&quot;替换_free_的地址变成_system&quot;&gt;替换 free 的地址变成 system&lt;/h4&gt;&lt;p&gt;从 IDA 或别的工具可得 free 的 GOT 地址在 0x601600, 程序跑起来后实际 free 函数地址会填充进来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/shellman_分析/free_GOT.png&quot; alt=&quot;free 在 GOT 上的地址&quot;&gt;&lt;/p&gt;
&lt;p&gt;用 gdb 把程序跑起来后，用断点获取 system 地址&lt;br&gt;gdb-peda$ x 0x601600&lt;br&gt;0x601600 &lt;a href=&quot;&amp;#109;&amp;#97;&amp;#x69;&amp;#108;&amp;#116;&amp;#111;&amp;#x3a;&amp;#x66;&amp;#114;&amp;#x65;&amp;#x65;&amp;#64;&amp;#103;&amp;#111;&amp;#x74;&amp;#46;&amp;#112;&amp;#108;&amp;#x74;&quot;&gt;&amp;#x66;&amp;#114;&amp;#x65;&amp;#x65;&amp;#64;&amp;#103;&amp;#111;&amp;#x74;&amp;#46;&amp;#112;&amp;#108;&amp;#x74;&lt;/a&gt;:    0x00007ffff7a91a70&lt;br&gt;gdb-peda$ b system&lt;br&gt;Breakpoint 3 at 0x7ffff7a53380&lt;/p&gt;
&lt;p&gt;同一个libc 两个函数的差值是一样的&lt;/p&gt;
&lt;p&gt;&gt;&amp;gt;&amp;gt; hex(0x00007ffff7a91a70 - 0x7ffff7a53380)&lt;br&gt;‘0x3e6f0’&lt;/p&gt;
&lt;p&gt;利用任意地址读写（更改数组项目的 ptr 指向，再 list 出内容或编辑回去 ），可以读出 free@GOT 的地址值，然后利用和 system 的差值固定这一特性计算 system 地址，再写回去覆盖 free 的函数地址值，至此完成函数地址替换。&lt;/p&gt;
&lt;h4 id=&quot;触发free（system）拿_shell&quot;&gt;触发free（system）拿 shell&lt;/h4&gt;&lt;p&gt;一时没想到 free 也是带参数的，只需要把 system 的字符串参数放在原来要 free 的地址上，其实就是 system (addr) 了，也就是说直接把”/bin/sh” 放到一个正常的条目里，这时 free 掉这个条目，就会执行 system(“/bin/sh”);&lt;/p&gt;
&lt;h2 id=&quot;全局数组的变化&quot;&gt;全局数组的变化&lt;/h2&gt;&lt;p&gt;一开始分配了3个0x80 的情况&lt;br&gt;&lt;img src=&quot;/img/shellman_分析/gdb1.png&quot; alt=&quot;一开始分配了3个0x80 的情况&quot;&gt;&lt;/p&gt;
&lt;p&gt;第二项条目在被覆盖 metadata 前的状态&lt;br&gt;&lt;img src=&quot;/img/shellman_分析/gdb2.png&quot; alt=&quot;第二项条目在被覆盖 metadata 前的状态&quot;&gt;&lt;/p&gt;
&lt;p&gt;执行覆盖后，第二项的inuse 标志位和 prev&lt;em&gt;size 被改，而第一项里的假 chunk 也准备好了&lt;br&gt;![被覆盖后](/img/shellman&lt;/em&gt;分析/gdb3.png)&lt;/p&gt;
&lt;p&gt;执行第二项的free 触发 unlink ， 第一项的地址变成在全局数组稍前的位置（编辑它就可以控制全局数组）&lt;br&gt;&lt;img src=&quot;/img/shellman_分析/gdb4.png&quot; alt=&quot;触发 unlink 后&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/shellman_分析/gdb5.png&quot; alt=&quot;触发 unlink 后&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时控制全局数组让第二项变成 free@GOT, 进而读取函数地址&lt;br&gt;&lt;img src=&quot;/img/shellman_分析/gdb6.png&quot; alt=&quot;全局数组的情况&quot;&gt;&lt;/p&gt;
&lt;p&gt;list 功能查看 free 地址，计算system 地址可以用编辑功能替换&lt;br&gt;&lt;img src=&quot;/img/shellman_分析/gdb7.png&quot; alt=&quot;使用任意读查看 free 的地址&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后把”/bin/sh” 放在一个正常的条目里，然后 delete 掉就会触发 system(“/bin/sh”)&lt;br&gt;&lt;img src=&quot;/img/shellman_分析/gdb8.png&quot; alt=&quot;执行 system(“/bin/sh”) 后&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/22281280/answer/34778466&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/22281280/answer/34778466&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.slideshare.net/AngelBoy1/heap-exploitation-51891400&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.slideshare.net/AngelBoy1/heap-exploitation-51891400&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://drops.wooyun.org/tips/16610&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://drops.wooyun.org/tips/16610&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://drops.wooyun.org/tips/7326&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://drops.wooyun.org/tips/7326&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/shellphish/how2heap/blob/master/unsafe_unlink.c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/shellphish/how2heap/blob/master/unsafe_unlink.c&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://winesap.logdown.com/posts/258859-0ctf-2015-freenote-write-up&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://winesap.logdown.com/posts/258859-0ctf-2015-freenote-write-up&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ALARM_signal_自动退出程序&quot;&gt;ALARM signal 自动退出程序&lt;/h2&gt;&lt;p&gt;首先把玩一下，发现有个 alarm 事件令程序在一分钟后退出，这里在二进制修改一下时间值去掉这个小玩意，并不会影响后续堆溢出的分析。&lt;/p&gt;
&lt;p&gt;时间值在 main 函数上作为立即数传给 alarm，用 IDA 或别的反汇编工具可以看到&lt;br&gt;一时间没有好用的二进制编辑，发现用 vi 也非常方便&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/22281280/answer/34778466&quot;&gt;https://www.zhihu.com/question/22281280/answer/34778466&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/shellman_分析/alarm.png&quot; alt=&quot;ALARM signal 时长&quot;&gt;&lt;/p&gt;
&lt;p&gt;之后的动态分析会用这个修改过的 shellman_noalarm 就不会一分钟后退出，看了网上一些介绍 gdb 可以屏蔽 ALARM signal， 也是可行方法吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>理解 TCP 的三次握手、四次挥手</title>
    <link href="http://dd3.org/2016/06/27/%E7%90%86%E8%A7%A3-TCP-%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://dd3.org/2016/06/27/理解-TCP-的三次握手、四次挥手/</id>
    <published>2016-06-27T03:11:03.000Z</published>
    <updated>2016-06-27T03:37:03.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;三次握手是这样&quot;&gt;三次握手是这样&lt;/h3&gt;&lt;p&gt;第一次（客户端 to 服务端）：我想建立连接，你听到吗？&lt;br&gt;如果服务端收到第一次握手的请求后，则可以确认：[客户端 to 服务端] 是畅通的。&lt;br&gt;客户端还不知道任何是否畅通的情况&lt;/p&gt;
&lt;p&gt;第二次（服务端 to 客户端）：我收到你的请求了，可以建立连接啊，你听得到吗？&lt;br&gt;此时，服务端可以确认的事情是：[客户端 to 服务端] 是畅通的。&lt;br&gt;客户端如果收到第二次握手的服务端回复后，则可以确认 [客户端 to 服务端], [服务端 to 客户端] 都是畅通的。&lt;/p&gt;
&lt;p&gt;第三次（客户端 to 服务端）：我听到你说可以建立连接了。&lt;br&gt;上面已经确认了[客户端 to 服务端] 是畅通的，这个包不会有问题。&lt;br&gt;此时如果服务端收到确认后，知道的事情有：[客户端 to 服务端]，[服务端 to 客户端] 都是畅通，&lt;br&gt;而客户端也知道 [客户端 to 服务端], [服务端 to 客户端] 都是畅通。&lt;/p&gt;
&lt;p&gt;好的，三次握手确认了双方畅通。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;然后为啥要四次挥手呢&quot;&gt;然后为啥要四次挥手呢&lt;/h3&gt;&lt;p&gt;现时情况：双方建立了连接，可以互相发送数据&lt;br&gt;首先我这边想断了连接，那我第一次挥手，说：我要断开，从现在起我也不给你发数据了，&lt;/p&gt;
&lt;p&gt;他那边收到了这个断开请求后，先发出一个确认包：好的，好的，我知道了，&lt;br&gt;我先收到这个确认后，就知道他收到了我的断开请求了。&lt;/p&gt;
&lt;p&gt;然而因为他那边也是可以发送数据的，突然让他停下来，他也得把手上的事情干完啊，那对方等到手上没事情后（数据发完了），就会再发出一个：好的，我准备好了，断开吧。&lt;/p&gt;
&lt;p&gt;最后我这边收到他的就绪信息后，现在大家都没事了，断开吧。&lt;/p&gt;
&lt;p&gt;嗯，四次挥手就这样。&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyNTA1NzAxOA==&amp;amp;mid=2650473778&amp;amp;idx=1&amp;amp;sn=43906c61316fc9a899f999783d3a9eb3&amp;amp;scene=0#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;戏说西游||TCP/IP协议的由来&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/SeaSky0606/p/4741982.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么“三次握手，四次挥手”？&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;三次握手是这样&quot;&gt;三次握手是这样&lt;/h3&gt;&lt;p&gt;第一次（客户端 to 服务端）：我想建立连接，你听到吗？&lt;br&gt;如果服务端收到第一次握手的请求后，则可以确认：[客户端 to 服务端] 是畅通的。&lt;br&gt;客户端还不知道任何是否畅通的情况&lt;/p&gt;
&lt;p&gt;第二次（服务端 to 客户端）：我收到你的请求了，可以建立连接啊，你听得到吗？&lt;br&gt;此时，服务端可以确认的事情是：[客户端 to 服务端] 是畅通的。&lt;br&gt;客户端如果收到第二次握手的服务端回复后，则可以确认 [客户端 to 服务端], [服务端 to 客户端] 都是畅通的。&lt;/p&gt;
&lt;p&gt;第三次（客户端 to 服务端）：我听到你说可以建立连接了。&lt;br&gt;上面已经确认了[客户端 to 服务端] 是畅通的，这个包不会有问题。&lt;br&gt;此时如果服务端收到确认后，知道的事情有：[客户端 to 服务端]，[服务端 to 客户端] 都是畅通，&lt;br&gt;而客户端也知道 [客户端 to 服务端], [服务端 to 客户端] 都是畅通。&lt;/p&gt;
&lt;p&gt;好的，三次握手确认了双方畅通。&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>山寨了个贪吃蛇</title>
    <link href="http://dd3.org/2016/06/22/%E5%B1%B1%E5%AF%A8%E4%BA%86%E4%B8%AA%E8%B4%AA%E5%90%83%E8%9B%87/"/>
    <id>http://dd3.org/2016/06/22/山寨了个贪吃蛇/</id>
    <published>2016-06-22T07:26:29.000Z</published>
    <updated>2016-06-22T07:37:41.000Z</updated>
    
    <content type="html">&lt;p&gt;看到知乎一个条问答：&lt;a href=&quot;https://www.zhihu.com/question/36280350&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机应届生简历中，「贪吃蛇，俄罗斯方块」等小项目有必要写到简历中吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;就试做了个贪吃蛇&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/viennadd/a67047dd21cf74fe2d034cd44a43fa31&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/viennadd/a67047dd21cf74fe2d034cd44a43fa31&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;刚开搞的时候发现命令行的按键处理都是平台相关的，就用 getchar 代替，需要按回车，&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;看到知乎一个条问答：&lt;a href=&quot;https://www.zhihu.com/question/36280350&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机应届生简历中，「贪吃蛇，俄罗斯方块」等小项目有必要写到简历中吗？&lt;/a&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 对 Retina Display 的支持</title>
    <link href="http://dd3.org/2016/04/24/Ubuntu-%E5%AF%B9-Retina-Display-%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>http://dd3.org/2016/04/24/Ubuntu-对-Retina-Display-的支持/</id>
    <published>2016-04-24T05:54:00.000Z</published>
    <updated>2016-04-24T05:59:00.000Z</updated>
    
    <content type="html">&lt;p&gt;VM 装 Ubuntu 显示效果朦朦的, 如果把 VM 的 retina 支持勾上又会导致整体 icon 缩小, 原来在这个情况下调一下 System Settings 的 scale, 效果就会合适。&lt;/p&gt;
&lt;p&gt;步骤如下&lt;br&gt;&lt;a href=&quot;http://askubuntu.com/questions/472262/adapt-ubuntu-to-a-high-dpi-resolution-screen?lq=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://askubuntu.com/questions/472262/adapt-ubuntu-to-a-high-dpi-resolution-screen?lq=1&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;VM 装 Ubuntu 显示效果朦朦的, 如果把 VM 的 retina 支持勾上又会导致整体 icon 缩小, 原来在这个情况下调一下 System Settings 的 scale, 效果就会合适。&lt;/p&gt;
&lt;p&gt;步骤如下&lt;br&gt;&lt;a href=&quot;http://asku
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode - Median of Two Sorted Arrays</title>
    <link href="http://dd3.org/2016/04/07/Leetcode-Median-of-Two-Sorted-Arrays/"/>
    <id>http://dd3.org/2016/04/07/Leetcode-Median-of-Two-Sorted-Arrays/</id>
    <published>2016-04-07T15:19:05.000Z</published>
    <updated>2016-12-31T12:41:15.000Z</updated>
    
    <content type="html">&lt;p&gt;对这题想到一个方法，既然是两个 Sorted Arrays, 用 Merge Sort 类似的归并方法组合两个数组就可以了, 根据总长度的奇偶抽取第 N 大的数值出来就完成啦。但这样做的话运行时间是 O(m+n / 2), 题目要求 O(log(m+n))&lt;/p&gt;
&lt;p&gt;第一个想法就是二分, 参考了几个博文之后, 先准备一个 Kth 函数用于寻找两个 sorted array 的第 K 小的数, 然后中位数就很容易了, 反而一开始追求二分中位数似乎会有不少 corner cases&lt;/p&gt;
&lt;p&gt;那先把问题换成两个有序数组的第 K 小的数值&lt;/p&gt;
&lt;p&gt;有以下步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有序 vector v1 和 v2, 求第 K 小&lt;/li&gt;
&lt;li&gt;二分思想是每次从 v1 和 v2 排除一半的可选元素&lt;/li&gt;
&lt;li&gt;有 x, y &amp;gt; 0 &amp;amp;&amp;amp; x + y == k, &lt;/li&gt;
&lt;li&gt;x, y 的取值也是有讲究, x = len(v1) / (len(v1) + len(v2)) * k, 这个意思是 len(v1) 占总 size 的百分比, 再乘以 k 的话就可以确保 x 的取值不会超出 v1 的数组范围, 这里简化了, 实际代码需要注意一些边界问题&lt;/li&gt;
&lt;li&gt;如果 &lt;strong&gt;v1[x] &amp;lt; v2[y]&lt;/strong&gt;, 则 v1[0 .. x] 的元素都不可能是第 K 小, 他们都肯定比第 K 的数值要小了, 我们则可以排除掉这些数值, &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v1[x] &amp;gt; v2[y]&lt;/strong&gt; 的话都是同样的思想&lt;/li&gt;
&lt;li&gt;调整 v1, v2 的长度, 下表值, k 的值等, 然后重复这些取值然后比较的步骤,&lt;/li&gt;
&lt;li&gt;调整完 size 和 下标后, 检查一下 k 是否下降到 1, 第 1 小的值是 min(v1[0], v2[0]), 还有如果其中一个 vector 的 size 下降到 0, 那可以直接返回另一个 vector 的第 k 个值&lt;/li&gt;
&lt;li&gt;如果是 &lt;strong&gt;v1[x] == v2[y]&lt;/strong&gt; 的话, x + y == k, v1[x] == v2[y], 那这个数值已经是第 K 小了, 这里是一个 base case&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大家可以 Leetcode 测试一下自己的代码 &lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/median-of-two-sorted-arrays/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面是我提交的代码&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; LEETCODE_MEDIAN_OF_TWO_SORTED_ARRAYS_H&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; LEETCODE_MEDIAN_OF_TWO_SORTED_ARRAYS_H&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cassert&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Solution &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMedianSortedArrays&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums1, &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nums1.size() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; median(nums2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nums2.size() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; median(nums1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; total_size = nums1.size() + nums2.size();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (total_size % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findKtnElement(nums1, nums2, total_size / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (findKtnElement(nums1, nums2, total_size / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    findKtnElement(nums1, nums2, total_size / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;median&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v.size() % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v.at(v.size() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (v.at(v.size() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    v.at(v.size() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; &lt;span class=&quot;title&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;amp;a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;amp;b)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a &amp;lt; b ? a : b;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; &lt;span class=&quot;title&quot;&gt;findKtnElement&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v1, &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; v1_len = v1.size();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; v2_len = v2.size();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v1_len == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v2.at(k);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v2_len == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v1.at(k);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; min(v1.at(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), v2.at(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        assert(v1_len + v2_len &amp;gt;= k);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; v1_begin = v1.begin();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; v2_begin = v2.begin();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, j;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            i = v1_len / (v1_len + v2_len + &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;) * (k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            j = k - i - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; a = *(v1_begin + i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; b = *(v2_begin + j);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (a &amp;lt; b) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* 丢弃 v1 的前 i + 1 (0 base) 个 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                v1_begin += i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                v1_len -= i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                k -= i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (b &amp;lt; a) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                v2_begin += j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                v2_len -= j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                k -= j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* 相等的话就不用介意了, 随意返回一个都是第 k 小 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *(v1_begin + i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v1_len == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v2.at(k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v2_len == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v1.at(k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; min(*v1_begin, *v2_begin);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//LEETCODE_MEDIAN_OF_TWO_SORTED_ARRAYS_H&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对这题想到一个方法，既然是两个 Sorted Arrays, 用 Merge Sort 类似的归并方法组合两个数组就可以了, 根据总长度的奇偶抽取第 N 大的数值出来就完成啦。但这样做的话运行时间是 O(m+n / 2), 题目要求 O(log(m+n))&lt;/p&gt;
&lt;p&gt;第一个想法就是二分, 参考了几个博文之后, 先准备一个 Kth 函数用于寻找两个 sorted array 的第 K 小的数, 然后中位数就很容易了, 反而一开始追求二分中位数似乎会有不少 corner cases&lt;/p&gt;
&lt;p&gt;那先把问题换成两个有序数组的第 K 小的数值&lt;/p&gt;
&lt;p&gt;有以下步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有序 vector v1 和 v2, 求第 K 小&lt;/li&gt;
&lt;li&gt;二分思想是每次从 v1 和 v2 排除一半的可选元素&lt;/li&gt;
&lt;li&gt;有 x, y &amp;gt; 0 &amp;amp;&amp;amp; x + y == k, &lt;/li&gt;
&lt;li&gt;x, y 的取值也是有讲究, x = len(v1) / (len(v1) + len(v2)) * k, 这个意思是 len(v1) 占总 size 的百分比, 再乘以 k 的话就可以确保 x 的取值不会超出 v1 的数组范围, 这里简化了, 实际代码需要注意一些边界问题&lt;/li&gt;
&lt;li&gt;如果 &lt;strong&gt;v1[x] &amp;lt; v2[y]&lt;/strong&gt;, 则 v1[0 .. x] 的元素都不可能是第 K 小, 他们都肯定比第 K 的数值要小了, 我们则可以排除掉这些数值, &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v1[x] &amp;gt; v2[y]&lt;/strong&gt; 的话都是同样的思想&lt;/li&gt;
&lt;li&gt;调整 v1, v2 的长度, 下表值, k 的值等, 然后重复这些取值然后比较的步骤,&lt;/li&gt;
&lt;li&gt;调整完 size 和 下标后, 检查一下 k 是否下降到 1, 第 1 小的值是 min(v1[0], v2[0]), 还有如果其中一个 vector 的 size 下降到 0, 那可以直接返回另一个 vector 的第 k 个值&lt;/li&gt;
&lt;li&gt;如果是 &lt;strong&gt;v1[x] == v2[y]&lt;/strong&gt; 的话, x + y == k, v1[x] == v2[y], 那这个数值已经是第 K 小了, 这里是一个 base case&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大家可以 Leetcode 测试一下自己的代码 &lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot;&gt;https://leetcode.com/problems/median-of-two-sorted-arrays/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面是我提交的代码&lt;br&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://dd3.org/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="leetcode" scheme="http://dd3.org/tags/leetcode/"/>
    
      <category term="algorithm" scheme="http://dd3.org/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>打印蛇形数组</title>
    <link href="http://dd3.org/2016/04/05/%E6%89%93%E5%8D%B0%E8%9B%87%E5%BD%A2%E6%95%B0%E7%BB%84/"/>
    <id>http://dd3.org/2016/04/05/打印蛇形数组/</id>
    <published>2016-04-04T16:34:47.000Z</published>
    <updated>2016-04-04T17:09:13.000Z</updated>
    
    <content type="html">&lt;p&gt;唉, 不熟练连这样的题都不会入手。。&lt;/p&gt;
&lt;p&gt;题目大概是这样 &lt;a href=&quot;http://icpc.ahu.edu.cn/OJ/ContestProblem.aspx?cid=16&amp;amp;id=410&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://icpc.ahu.edu.cn/OJ/ContestProblem.aspx?cid=16&amp;amp;id=410&lt;/a&gt;&lt;br&gt;参考了 &lt;a href=&quot;http://www.cnblogs.com/kaima/p/4773908.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/kaima/p/4773908.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;外部的 while 循环检查 number 是否到 N * N, 如果 N 为偶数则可以在这里停下, (最后四个位置刚好填完)&lt;br&gt;里面第一个 if 检查奇数 N 的情况(会填充剩下一个位置)&lt;/p&gt;
&lt;p&gt;然后开始填充数组, 调节 x y 的坐标值填充一圈蛇形, 一圈后 x y 回归原点&lt;br&gt;缩小 size 变量&lt;br&gt;x+1, y+1 跳入内圈重复以上步骤又填充一圈, 直至跳出 while 循环&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/打印蛇形数组/snake.jpg&quot; alt=&quot;x y 走向&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码如下&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; SIZE = &lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; A[SIZE][SIZE];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, y = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dest = n * n;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (number &amp;lt; dest)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (number == dest - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            A[x][y] = number;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* to left, down, right, up */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; ++i, ++x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            A[x][y] = number;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            number++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; ++i, ++y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            A[x][y] = number;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            number++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; ++i, x--)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            A[x][y] = number;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            number++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; ++i, y--)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            A[x][y] = number;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            number++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        size -= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        x++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        y++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; y &amp;lt; n; ++y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; x &amp;lt; n; ++x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; A[x][y] &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;唉, 不熟练连这样的题都不会入手。。&lt;/p&gt;
&lt;p&gt;题目大概是这样 &lt;a href=&quot;http://icpc.ahu.edu.cn/OJ/ContestProblem.aspx?cid=16&amp;amp;id=410&quot;&gt;http://icpc.ahu.edu.cn/OJ/ContestProblem.aspx?cid=16&amp;amp;id=410&lt;/a&gt;&lt;br&gt;参考了 &lt;a href=&quot;http://www.cnblogs.com/kaima/p/4773908.html&quot;&gt;http://www.cnblogs.com/kaima/p/4773908.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;外部的 while 循环检查 number 是否到 N * N, 如果 N 为偶数则可以在这里停下, (最后四个位置刚好填完)&lt;br&gt;里面第一个 if 检查奇数 N 的情况(会填充剩下一个位置)&lt;/p&gt;
&lt;p&gt;然后开始填充数组, 调节 x y 的坐标值填充一圈蛇形, 一圈后 x y 回归原点&lt;br&gt;缩小 size 变量&lt;br&gt;x+1, y+1 跳入内圈重复以上步骤又填充一圈, 直至跳出 while 循环&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/打印蛇形数组/snake.jpg&quot; alt=&quot;x y 走向&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码如下&lt;br&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>日剧《我与明星的99日》</title>
    <link href="http://dd3.org/2016/03/29/%E6%97%A5%E5%89%A7%E3%80%8A%E6%88%91%E4%B8%8E%E6%98%8E%E6%98%9F%E7%9A%8499%E6%97%A5%E3%80%8B/"/>
    <id>http://dd3.org/2016/03/29/日剧《我与明星的99日》/</id>
    <published>2016-03-29T11:19:49.000Z</published>
    <updated>2016-03-29T11:31:41.000Z</updated>
    
    <content type="html">&lt;p&gt;剧情没什么营养, 诡异的日韩混血剧, 不过金泰熙好漂亮。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;剧情没什么营养, 诡异的日韩混血剧, 不过金泰熙好漂亮。&lt;/p&gt;

    
    </summary>
    
      <category term="Drama" scheme="http://dd3.org/categories/Drama/"/>
    
    
      <category term="日剧" scheme="http://dd3.org/tags/%E6%97%A5%E5%89%A7/"/>
    
      <category term="金泰熙" scheme="http://dd3.org/tags/%E9%87%91%E6%B3%B0%E7%86%99/"/>
    
  </entry>
  
  <entry>
    <title>韩剧《未生》</title>
    <link href="http://dd3.org/2016/03/28/%E9%9F%A9%E5%89%A7%E3%80%8A%E6%9C%AA%E7%94%9F%E3%80%8B/"/>
    <id>http://dd3.org/2016/03/28/韩剧《未生》/</id>
    <published>2016-03-28T12:48:47.000Z</published>
    <updated>2016-03-29T11:27:36.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;未生、完生&quot;&gt;未生、完生&lt;/h3&gt;&lt;p&gt;一年内断断续续的看完了这部剧, 第一次看到『未生』这词完全想不到什么意思, 其实这是个韩国的围棋术语。『未生』对应『完生』, 完生其实就是双眼活棋, 未生就借喻职场新人了。&lt;/p&gt;
&lt;p&gt;不同于某些套题作文剧, 是有共鸣在, 这励志鸡汤熬得不错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/韩剧《未生》/未生.jpg&quot; alt=&quot;《未生》剧照&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;未生、完生&quot;&gt;未生、完生&lt;/h3&gt;&lt;p&gt;一年内断断续续的看完了这部剧, 第一次看到『未生』这词完全想不到什么意思, 其实这是个韩国的围棋术语。『未生』对应『完生』, 完生其实就是双眼活棋, 未生就借喻职场新人了。&lt;/p&gt;
&lt;p&gt;不同于某些套题作文剧, 是有共鸣在,
    
    </summary>
    
      <category term="Drama" scheme="http://dd3.org/categories/Drama/"/>
    
    
      <category term="未生" scheme="http://dd3.org/tags/%E6%9C%AA%E7%94%9F/"/>
    
      <category term="韩剧" scheme="http://dd3.org/tags/%E9%9F%A9%E5%89%A7/"/>
    
      <category term="围棋" scheme="http://dd3.org/tags/%E5%9B%B4%E6%A3%8B/"/>
    
  </entry>
  
  <entry>
    <title>非基于比较的排序算法</title>
    <link href="http://dd3.org/2016/03/21/%E9%9D%9E%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E6%8E%92%E5%BA%8F/"/>
    <id>http://dd3.org/2016/03/21/非基于比较排序/</id>
    <published>2016-03-21T15:42:16.000Z</published>
    <updated>2016-03-28T13:24:28.000Z</updated>
    
    <content type="html">&lt;p&gt;计数排序(Counting Sort)、桶排序、基数排序三个已经有不少很好的博客文章介绍，但不自己尝试描述一遍就难以熟悉，权当记录。&lt;/p&gt;
&lt;p&gt;参考了 &lt;a href=&quot;http://www.cnblogs.com/ttltry-air/archive/2012/08/04/2623302.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计数排序，基数排序和桶排序&lt;/a&gt; 和 &lt;a href=&quot;https://www.byvoid.com/blog/sort-radix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三种线性排序算法 计数排序、桶排序与基数排序&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;计数排序&quot;&gt;计数排序&lt;/h3&gt;&lt;p&gt;首先是主要的步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备线性表字典 Dict[], 其长度 m 是待排序元素的范围, 换言之每个待排序的元素都能在这个字典找到对应的位置&lt;/li&gt;
&lt;li&gt;扫描长度为 n 的待排序表 Unordered[], 把每个元素的出现次数记录在 Dict 里&lt;/li&gt;
&lt;li&gt;现在 Dict 记录着每个元素的的出现次数, 而 Dict 本身是有序的&lt;/li&gt;
&lt;li&gt;给 Dict 做累加, Dict[i] += Dict[i - 1] for i in 1 to m, &lt;/li&gt;
&lt;li&gt;累加后字典的值指定了元素排序后的位置，反向遍历待排序的A, 结合指定了元素位置的字典C 则可生成有序结果, 而反向遍历的元素会放在更后的位置, 这特性确保这是稳定排序&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C 语言例子&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *A, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\t&quot;&lt;/span&gt;, A[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CountingSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *A, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *C, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *Order)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Original Data: \n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    PrintArray(A, n);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// initialize Dict&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// memset(C, 0, m * sizeof(m)); 这行居然导致代码着色失效, 不用括号包着 m 则问题解决，着实诡异。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(C, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, m * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; m);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// counting element of A&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        C[A[i]]++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Dict: Before Accumulate\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    PrintArray(C, m);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// scan C, accumulate,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 累加后, C 字典里的值就是 元素有序后的位置, 因为每次取得和占用位置后应该减一, 使用字典C 逆遍历A 就可以保持稳定而有序&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; m; ++i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        C[i] += C[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Dict: After Accumulate\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    PrintArray(C, m);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// reverse filling result, stable sort&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Order[C[A[i]]] = A[i]; &lt;span class=&quot;comment&quot;&gt;// 根据字典 C 得知 A[i] 的位置（累加后的C 的值x : 前面有x个值比我小 )&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        C[A[i]]--;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Sorted Array:\n&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    PrintArray(Order, n);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; K = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// maximum in range, size of C&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// size of A&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; A[N] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; C[K + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; Order[N]; &lt;span class=&quot;comment&quot;&gt;// result&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; ++i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        A[i] = rand() % K;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    CountingSort(A, N, C, K, Order);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;桶排序_(Bucket_Sort)&quot;&gt;桶排序 (Bucket Sort)&lt;/h3&gt;&lt;p&gt;观看 &lt;a href=&quot;http://www.cs.usfca.edu/~galles/visualization/BucketSort.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BucketSort Visualization&lt;/a&gt; 后, 感觉桶排序就像散列表，然后加入了顺序的想法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;过程与计数排序的部分步骤相近, 建立 Dict 字典用以储存元素的出现情况, Dict 其实可以是线性表或者散列表, 看需求; 而本来在计数排序中的计数步骤这里则类似是散列表的 Chaining&lt;/li&gt;
&lt;li&gt;对字典项的 Chaining 进行排序, 字典是有序的, Chaining 也变成有序, 扫描一次把元素读出来就完成排序了&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;基数排序_(Radix_Sort)&quot;&gt;基数排序 (Radix Sort)&lt;/h3&gt;&lt;p&gt;假设是10 进制数&lt;br&gt;主要思想是, 把整数按数位分割, 然后就可以对一列个位数 key 进行稳定排序, from least significant to most significant digit.&lt;/p&gt;
&lt;p&gt;一列个位数的排序就当然是使用上面的非基于比较的排序方式啦, 按十进制数来说, 每次计数排序就需要10个坑来计数&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extract_digit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; place, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; base = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i / (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;built_in&quot;&gt;pow&lt;/span&gt;(base, place) % base;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CountingSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v, &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;tmp, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; place)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; BASE = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; C[BASE] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; v.size(); ++i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d = extract_digit(v[i], place);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        C[d]++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; BASE; ++i)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        C[i] += C[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = v.size() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d = extract_digit(v[i], place);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        tmp[C[d] - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = v[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        C[d]--;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    v.swap(tmp);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RadixSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; element_max_width = &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; tmp (v.size());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; place = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; place &amp;lt; element_max_width; ++place)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        CountingSort(v, tmp, place);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;计数排序(Counting Sort)、桶排序、基数排序三个已经有不少很好的博客文章介绍，但不自己尝试描述一遍就难以熟悉，权当记录。&lt;/p&gt;
&lt;p&gt;参考了 &lt;a href=&quot;http://www.cnblogs.com/ttltry-air/archive/2012/08/04/2623302.html&quot;&gt;计数排序，基数排序和桶排序&lt;/a&gt; 和 &lt;a href=&quot;https://www.byvoid.com/blog/sort-radix&quot;&gt;三种线性排序算法 计数排序、桶排序与基数排序&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
      <category term="排序" scheme="http://dd3.org/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>最近看的剧</title>
    <link href="http://dd3.org/2016/03/11/%E6%9C%80%E8%BF%91%E7%9C%8B%E7%9A%84%E5%89%A7/"/>
    <id>http://dd3.org/2016/03/11/最近看的剧/</id>
    <published>2016-03-11T13:35:11.000Z</published>
    <updated>2016-03-29T11:27:42.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/img/最近看的剧/rewalkinpark.jpg&quot; alt=&quot;如晴天似雨天&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;电影&quot;&gt;电影&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Like Sunday Like Rain&lt;/strong&gt;&lt;br&gt;剧情轻松、吸引、感人、画面唯美、女主漂亮&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向阳处的她&lt;/strong&gt;&lt;br&gt;刷上野树里系列之一，初恋的感觉，女主漂亮&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;恐怖直播&lt;/strong&gt;&lt;br&gt;低成本紧凑紧张悬疑故事，的确无尿点但并不能说很吸引&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;老男孩&lt;/strong&gt;&lt;br&gt;吸引、悬疑、人性、情色、暴力&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大叔&lt;/strong&gt;&lt;br&gt;特工剧，动作、剧情安排都不错，喜爱特工题材的推荐特工经典《谍影重重》&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;热血警探&lt;/strong&gt;&lt;br&gt;打发时间、喜剧，带上爆谷可乐休息一下吧&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;盗钥匙的方法&lt;/strong&gt;&lt;br&gt;打发时间、喜剧，良伴于无眠之夜&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;电视剧&quot;&gt;电视剧&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Dr.伦太郎&lt;/strong&gt;&lt;br&gt;堺雅人/苍井优，关于精神健康，每个人都有病系列，整体还不错，女主母亲演得杠杠的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;胜者即正义 Legal High&lt;/strong&gt;&lt;br&gt;堺雅人/新垣结衣，喜剧，它的信条看你信不信了，打发时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;求婚大作战&lt;/strong&gt;&lt;br&gt;山下智久/长泽雅美，貌似当年在内地也是热潮，初恋的感觉&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后的朋友&lt;/strong&gt;&lt;br&gt;围绕几个同伴关系的故事，男主暴力时间得快进，好评，女二神演技&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交响情人梦&lt;/strong&gt;&lt;br&gt;玉木宏/上野树里，如果可以接受这种风格的话，电视剧要和SP 一起看了才完整，女主神演技&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;家族的形式&lt;/strong&gt;&lt;br&gt;香取慎吾/上野树里，还在连载中，就是个电视剧，我就是去看女主的，一集突然就看完了，不知道什么吸引就被吸引了&lt;br&gt;刚刚完结，好评&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;琅琊榜&lt;/strong&gt;&lt;br&gt;胡歌，国产良心，就是集数有点多，只是故事长了变成打发时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;太阳的后裔&lt;/strong&gt;&lt;br&gt;宋钟基/宋慧乔，还在连载中，已经是近年韩国爱情剧最好，所谓”势均力敌”的爱情&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;秘密花园&lt;/strong&gt;&lt;br&gt;可算当年第一套韩剧，难免有些俗套剧情，但整体安排很不错，那种一见钟情，中段吸引，后段感人&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/最近看的剧/rewalkinpark.jpg&quot; alt=&quot;如晴天似雨天&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;电影&quot;&gt;电影&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Like Sunday Like Rain&lt;/strong&gt;&lt;br&gt;剧情轻松、吸引、感人、画面唯美、女主漂亮&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向阳处的她&lt;/strong&gt;&lt;br&gt;刷上野树里系列之一，初恋的感觉，女主漂亮&lt;br&gt;
    
    </summary>
    
      <category term="Drama" scheme="http://dd3.org/categories/Drama/"/>
    
    
  </entry>
  
  <entry>
    <title>the lost honour of christopher jefferies</title>
    <link href="http://dd3.org/2015/12/19/the-lost-honour-of-christopher-jefferies/"/>
    <id>http://dd3.org/2015/12/19/the-lost-honour-of-christopher-jefferies/</id>
    <published>2015-12-19T15:17:57.000Z</published>
    <updated>2016-03-29T11:27:56.000Z</updated>
    
    <content type="html">&lt;p&gt;剧情、人物、画面、节奏、配乐皆好&lt;/p&gt;
&lt;p&gt;主角是个纯粹( with honour )的人，与之对比的是大众和媒体的『正常』&lt;/p&gt;
&lt;p&gt;没有典型的紧张紧凑，自然就引人投入&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;剧情、人物、画面、节奏、配乐皆好&lt;/p&gt;
&lt;p&gt;主角是个纯粹( with honour )的人，与之对比的是大众和媒体的『正常』&lt;/p&gt;
&lt;p&gt;没有典型的紧张紧凑，自然就引人投入&lt;/p&gt;

    
    </summary>
    
      <category term="Drama" scheme="http://dd3.org/categories/Drama/"/>
    
    
  </entry>
  
  <entry>
    <title>捣腾博客的中文字体</title>
    <link href="http://dd3.org/2015/09/26/%E6%8D%A3%E8%85%BE%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/"/>
    <id>http://dd3.org/2015/09/26/捣腾博客的中文字体/</id>
    <published>2015-09-26T13:12:51.000Z</published>
    <updated>2015-12-19T15:57:46.000Z</updated>
    
    <content type="html">&lt;p&gt;中文字体文件体积巨大，通常站长并不会把完整的中文字体文件加入网站当中&lt;/p&gt;
&lt;p&gt;如果想给中文内容套上一个漂亮的字体，现在似乎做法是使用 &lt;a href=&quot;http://ecomfe.github.io/fontmin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fontmin&lt;/a&gt; 生成一个字体文件子集来解决体积过大的问题&lt;/p&gt;
&lt;p&gt;首先用正则 [\u4e00-\u9fa5] 匹配出所有 HTML 文件的中文字符&lt;/p&gt;
&lt;p&gt;然后使用 fontmin 生成只包含用到的字符，体积就会小很多&lt;/p&gt;
&lt;p&gt;嗯，写个脚本搞成一个命令，然后加到博客生成的过程中就易用多了  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;中文字体文件体积巨大，通常站长并不会把完整的中文字体文件加入网站当中&lt;/p&gt;
&lt;p&gt;如果想给中文内容套上一个漂亮的字体，现在似乎做法是使用 &lt;a href=&quot;http://ecomfe.github.io/fontmin/&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
</feed>
