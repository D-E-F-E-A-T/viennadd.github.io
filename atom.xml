<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风吹雪</title>
  <subtitle>IT &amp; 生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dd3.org/"/>
  <updated>2016-06-27T03:37:03.000Z</updated>
  <id>http://dd3.org/</id>
  
  <author>
    <name>vienna</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解 TCP 的三次握手、四次挥手</title>
    <link href="http://dd3.org/2016/06/27/%E7%90%86%E8%A7%A3-TCP-%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E3%80%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://dd3.org/2016/06/27/理解-TCP-的三次握手、四次挥手/</id>
    <published>2016-06-27T03:11:03.000Z</published>
    <updated>2016-06-27T03:37:03.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;三次握手是这样&quot;&gt;三次握手是这样&lt;/h3&gt;&lt;p&gt;第一次（客户端 to 服务端）：我想建立连接，你听到吗？&lt;br&gt;如果服务端收到第一次握手的请求后，则可以确认：[客户端 to 服务端] 是畅通的。&lt;br&gt;客户端还不知道任何是否畅通的情况&lt;/p&gt;
&lt;p&gt;第二次（服务端 to 客户端）：我收到你的请求了，可以建立连接啊，你听得到吗？&lt;br&gt;此时，服务端可以确认的事情是：[客户端 to 服务端] 是畅通的。&lt;br&gt;客户端如果收到第二次握手的服务端回复后，则可以确认 [客户端 to 服务端], [服务端 to 客户端] 都是畅通的。&lt;/p&gt;
&lt;p&gt;第三次（客户端 to 服务端）：我听到你说可以建立连接了。&lt;br&gt;上面已经确认了[客户端 to 服务端] 是畅通的，这个包不会有问题。&lt;br&gt;此时如果服务端收到确认后，知道的事情有：[客户端 to 服务端]，[服务端 to 客户端] 都是畅通，&lt;br&gt;而客户端也知道 [客户端 to 服务端], [服务端 to 客户端] 都是畅通。&lt;/p&gt;
&lt;p&gt;好的，三次握手确认了双方畅通。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;然后为啥要四次挥手呢&quot;&gt;然后为啥要四次挥手呢&lt;/h3&gt;&lt;p&gt;现时情况：双方建立了连接，可以互相发送数据&lt;br&gt;首先我这边想断了连接，那我第一次挥手，说：我要断开，从现在起我也不给你发数据了，&lt;/p&gt;
&lt;p&gt;他那边收到了这个断开请求后，先发出一个确认包：好的，好的，我知道了，&lt;br&gt;我先收到这个确认后，就知道他收到了我的断开请求了。&lt;/p&gt;
&lt;p&gt;然而因为他那边也是可以发送数据的，突然让他停下来，他也得把手上的事情干完啊，那对方等到手上没事情后（数据发完了），就会再发出一个：好的，我准备好了，断开吧。&lt;/p&gt;
&lt;p&gt;最后我这边收到他的就绪信息后，现在大家都没事了，断开吧。&lt;/p&gt;
&lt;p&gt;嗯，四次挥手就这样。&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyNTA1NzAxOA==&amp;amp;mid=2650473778&amp;amp;idx=1&amp;amp;sn=43906c61316fc9a899f999783d3a9eb3&amp;amp;scene=0#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;戏说西游||TCP/IP协议的由来&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/SeaSky0606/p/4741982.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么“三次握手，四次挥手”？&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;三次握手是这样&quot;&gt;三次握手是这样&lt;/h3&gt;&lt;p&gt;第一次（客户端 to 服务端）：我想建立连接，你听到吗？&lt;br&gt;如果服务端收到第一次握手的请求后，则可以确认：[客户端 to 服务端] 是畅通的。&lt;br&gt;客户端还不知道任何是否畅通的情况&lt;/p&gt;
&lt;p&gt;第二次（服务端 to 客户端）：我收到你的请求了，可以建立连接啊，你听得到吗？&lt;br&gt;此时，服务端可以确认的事情是：[客户端 to 服务端] 是畅通的。&lt;br&gt;客户端如果收到第二次握手的服务端回复后，则可以确认 [客户端 to 服务端], [服务端 to 客户端] 都是畅通的。&lt;/p&gt;
&lt;p&gt;第三次（客户端 to 服务端）：我听到你说可以建立连接了。&lt;br&gt;上面已经确认了[客户端 to 服务端] 是畅通的，这个包不会有问题。&lt;br&gt;此时如果服务端收到确认后，知道的事情有：[客户端 to 服务端]，[服务端 to 客户端] 都是畅通，&lt;br&gt;而客户端也知道 [客户端 to 服务端], [服务端 to 客户端] 都是畅通。&lt;/p&gt;
&lt;p&gt;好的，三次握手确认了双方畅通。&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>山寨了个贪吃蛇</title>
    <link href="http://dd3.org/2016/06/22/%E5%B1%B1%E5%AF%A8%E4%BA%86%E4%B8%AA%E8%B4%AA%E5%90%83%E8%9B%87/"/>
    <id>http://dd3.org/2016/06/22/山寨了个贪吃蛇/</id>
    <published>2016-06-22T07:26:29.000Z</published>
    <updated>2016-06-22T07:37:41.000Z</updated>
    
    <content type="html">&lt;p&gt;看到知乎一个条问答：&lt;a href=&quot;https://www.zhihu.com/question/36280350&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机应届生简历中，「贪吃蛇，俄罗斯方块」等小项目有必要写到简历中吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;就试做了个贪吃蛇&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/viennadd/a67047dd21cf74fe2d034cd44a43fa31&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/viennadd/a67047dd21cf74fe2d034cd44a43fa31&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;刚开搞的时候发现命令行的按键处理都是平台相关的，就用 getchar 代替，需要按回车，&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;看到知乎一个条问答：&lt;a href=&quot;https://www.zhihu.com/question/36280350&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机应届生简历中，「贪吃蛇，俄罗斯方块」等小项目有必要写到简历中吗？&lt;/a&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 对 Retina Display 的支持</title>
    <link href="http://dd3.org/2016/04/24/Ubuntu-%E5%AF%B9-Retina-Display-%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>http://dd3.org/2016/04/24/Ubuntu-对-Retina-Display-的支持/</id>
    <published>2016-04-24T05:54:00.000Z</published>
    <updated>2016-04-24T05:59:00.000Z</updated>
    
    <content type="html">&lt;p&gt;VM 装 Ubuntu 显示效果朦朦的, 如果把 VM 的 retina 支持勾上又会导致整体 icon 缩小, 原来在这个情况下调一下 System Settings 的 scale, 效果就会合适。&lt;/p&gt;
&lt;p&gt;步骤如下&lt;br&gt;&lt;a href=&quot;http://askubuntu.com/questions/472262/adapt-ubuntu-to-a-high-dpi-resolution-screen?lq=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://askubuntu.com/questions/472262/adapt-ubuntu-to-a-high-dpi-resolution-screen?lq=1&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;VM 装 Ubuntu 显示效果朦朦的, 如果把 VM 的 retina 支持勾上又会导致整体 icon 缩小, 原来在这个情况下调一下 System Settings 的 scale, 效果就会合适。&lt;/p&gt;
&lt;p&gt;步骤如下&lt;br&gt;&lt;a href=&quot;http://asku
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode - Median of Two Sorted Arrays</title>
    <link href="http://dd3.org/2016/04/07/Leetcode-Median-of-Two-Sorted-Arrays/"/>
    <id>http://dd3.org/2016/04/07/Leetcode-Median-of-Two-Sorted-Arrays/</id>
    <published>2016-04-07T15:19:05.000Z</published>
    <updated>2016-04-14T12:54:08.000Z</updated>
    
    <content type="html">&lt;p&gt;对这题想到一个方法，既然是两个 Sorted Arrays, 用 Merge Sort 类似的归并方法组合两个数组就可以了, 根据总长度的奇偶抽取第 N 大的数值出来就完成啦。但这样做的话运行时间是 O(m+n / 2), 题目要求 O(log(m+n))&lt;/p&gt;
&lt;p&gt;第一个想法就是二分, 参考了几个博文之后, 先准备一个 Kth 函数用于寻找两个 sorted array 的第 K 小的数, 然后中位数就很容易了, 反而一开始追求二分中位数似乎会有不少 corner cases&lt;/p&gt;
&lt;p&gt;那先把问题换成两个有序数组的第 K 小的数值&lt;/p&gt;
&lt;p&gt;有以下步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有序 vector v1 和 v2, 求第 K 小&lt;/li&gt;
&lt;li&gt;二分思想是每次从 v1 和 v2 排除一半的可选元素&lt;/li&gt;
&lt;li&gt;有 x, y &amp;gt; 0 &amp;amp;&amp;amp; x + y == k, &lt;/li&gt;
&lt;li&gt;x, y 的取值也是有讲究, x = len(v1) / (len(v1) + len(v2)) * k, 这个意思是 len(v1) 占总 size 的百分比, 再乘以 k 的话就可以确保 x 的取值不会超出 v1 的数组范围, 这里简化了, 实际代码需要注意一些边界问题&lt;/li&gt;
&lt;li&gt;如果 &lt;strong&gt;v1[x] &amp;lt; v2[y]&lt;/strong&gt;, 则 v1[0 .. x] 的元素都不可能是第 K 小, 他们都肯定比第 K 的数值要小了, 我们则可以排除掉这些数值, &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v1[x] &amp;gt; v2[y]&lt;/strong&gt; 的话都是同样的思想&lt;/li&gt;
&lt;li&gt;调整 v1, v2 的长度, 下表值, k 的值等, 然后重复这些取值然后比较的步骤,&lt;/li&gt;
&lt;li&gt;调整完 size 和 下标后, 检查一下 k 是否下降到 1, 第 1 小的值是 min(v1[0], v2[0]), 还有如果其中一个 vector 的 size 下降到 0, 那可以直接返回另一个 vector 的第 k 个值&lt;/li&gt;
&lt;li&gt;如果是 &lt;strong&gt;v1[x] == v2[y]&lt;/strong&gt; 的话, x + y == k, v1[x] == v2[y], 那这个数值已经是第 K 小了, 这里是一个 base case&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大家可以 Leetcode 测试一下自己的代码 &lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/median-of-two-sorted-arrays/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面是我提交的代码&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; LEETCODE_MEDIAN_OF_TWO_SORTED_ARRAYS_H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; LEETCODE_MEDIAN_OF_TWO_SORTED_ARRAYS_H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;cassert&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMedianSortedArrays&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums1, &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nums1.size() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; median(nums2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nums2.size() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; median(nums1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; total_size = nums1.size() + nums2.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (total_size % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findKtnElement(nums1, nums2, total_size / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (findKtnElement(nums1, nums2, total_size / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    findKtnElement(nums1, nums2, total_size / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;median&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v.size() % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v.at(v.size() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (v.at(v.size() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    v.at(v.size() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; &lt;span class=&quot;title&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;amp;a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &amp;amp;b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a &amp;lt; b ? a : b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; &lt;span class=&quot;title&quot;&gt;findKtnElement&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v1, &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; v1_len = v1.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; v2_len = v2.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v1_len == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v2.at(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v2_len == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v1.at(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; min(v1.at(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), v2.at(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assert(v1_len + v2_len &amp;gt;= k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; v1_begin = v1.begin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; v2_begin = v2.begin();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i = v1_len / (v1_len + v2_len + &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;) * (k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            j = k - i - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; a = *(v1_begin + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; b = *(v2_begin + j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (a &amp;lt; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* 丢弃 v1 的前 i + 1 (0 base) 个 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                v1_begin += i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                v1_len -= i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                k -= i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (b &amp;lt; a) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                v2_begin += j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                v2_len -= j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                k -= j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* 相等的话就不用介意了, 随意返回一个都是第 k 小 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *(v1_begin + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v1_len == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v2.at(k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v2_len == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v1.at(k - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; min(*v1_begin, *v2_begin);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//LEETCODE_MEDIAN_OF_TWO_SORTED_ARRAYS_H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对这题想到一个方法，既然是两个 Sorted Arrays, 用 Merge Sort 类似的归并方法组合两个数组就可以了, 根据总长度的奇偶抽取第 N 大的数值出来就完成啦。但这样做的话运行时间是 O(m+n / 2), 题目要求 O(log(m+n))&lt;/p&gt;
&lt;p&gt;第一个想法就是二分, 参考了几个博文之后, 先准备一个 Kth 函数用于寻找两个 sorted array 的第 K 小的数, 然后中位数就很容易了, 反而一开始追求二分中位数似乎会有不少 corner cases&lt;/p&gt;
&lt;p&gt;那先把问题换成两个有序数组的第 K 小的数值&lt;/p&gt;
&lt;p&gt;有以下步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有序 vector v1 和 v2, 求第 K 小&lt;/li&gt;
&lt;li&gt;二分思想是每次从 v1 和 v2 排除一半的可选元素&lt;/li&gt;
&lt;li&gt;有 x, y &amp;gt; 0 &amp;amp;&amp;amp; x + y == k, &lt;/li&gt;
&lt;li&gt;x, y 的取值也是有讲究, x = len(v1) / (len(v1) + len(v2)) * k, 这个意思是 len(v1) 占总 size 的百分比, 再乘以 k 的话就可以确保 x 的取值不会超出 v1 的数组范围, 这里简化了, 实际代码需要注意一些边界问题&lt;/li&gt;
&lt;li&gt;如果 &lt;strong&gt;v1[x] &amp;lt; v2[y]&lt;/strong&gt;, 则 v1[0 .. x] 的元素都不可能是第 K 小, 他们都肯定比第 K 的数值要小了, 我们则可以排除掉这些数值, &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v1[x] &amp;gt; v2[y]&lt;/strong&gt; 的话都是同样的思想&lt;/li&gt;
&lt;li&gt;调整 v1, v2 的长度, 下表值, k 的值等, 然后重复这些取值然后比较的步骤,&lt;/li&gt;
&lt;li&gt;调整完 size 和 下标后, 检查一下 k 是否下降到 1, 第 1 小的值是 min(v1[0], v2[0]), 还有如果其中一个 vector 的 size 下降到 0, 那可以直接返回另一个 vector 的第 k 个值&lt;/li&gt;
&lt;li&gt;如果是 &lt;strong&gt;v1[x] == v2[y]&lt;/strong&gt; 的话, x + y == k, v1[x] == v2[y], 那这个数值已经是第 K 小了, 这里是一个 base case&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大家可以 Leetcode 测试一下自己的代码 &lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot;&gt;https://leetcode.com/problems/median-of-two-sorted-arrays/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面是我提交的代码&lt;br&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://dd3.org/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="algorithm" scheme="http://dd3.org/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://dd3.org/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>打印蛇形数组</title>
    <link href="http://dd3.org/2016/04/05/%E6%89%93%E5%8D%B0%E8%9B%87%E5%BD%A2%E6%95%B0%E7%BB%84/"/>
    <id>http://dd3.org/2016/04/05/打印蛇形数组/</id>
    <published>2016-04-04T16:34:47.000Z</published>
    <updated>2016-04-04T17:09:13.000Z</updated>
    
    <content type="html">&lt;p&gt;唉, 不熟练连这样的题都不会入手。。&lt;/p&gt;
&lt;p&gt;题目大概是这样 &lt;a href=&quot;http://icpc.ahu.edu.cn/OJ/ContestProblem.aspx?cid=16&amp;amp;id=410&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://icpc.ahu.edu.cn/OJ/ContestProblem.aspx?cid=16&amp;amp;id=410&lt;/a&gt;&lt;br&gt;参考了 &lt;a href=&quot;http://www.cnblogs.com/kaima/p/4773908.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/kaima/p/4773908.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;外部的 while 循环检查 number 是否到 N * N, 如果 N 为偶数则可以在这里停下, (最后四个位置刚好填完)&lt;br&gt;里面第一个 if 检查奇数 N 的情况(会填充剩下一个位置)&lt;/p&gt;
&lt;p&gt;然后开始填充数组, 调节 x y 的坐标值填充一圈蛇形, 一圈后 x y 回归原点&lt;br&gt;缩小 size 变量&lt;br&gt;x+1, y+1 跳入内圈重复以上步骤又填充一圈, 直至跳出 while 循环&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/打印蛇形数组/snake.jpg&quot; alt=&quot;x y 走向&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码如下&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; SIZE = &lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; A[SIZE][SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, y = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dest = n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (number &amp;lt; dest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (number == dest - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            A[x][y] = number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* to left, down, right, up */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; ++i, ++x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            A[x][y] = number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            number++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; ++i, ++y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            A[x][y] = number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            number++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; ++i, x--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            A[x][y] = number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            number++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; ++i, y--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            A[x][y] = number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            number++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        size -= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        y++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; y &amp;lt; n; ++y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; x &amp;lt; n; ++x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; A[x][y] &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;唉, 不熟练连这样的题都不会入手。。&lt;/p&gt;
&lt;p&gt;题目大概是这样 &lt;a href=&quot;http://icpc.ahu.edu.cn/OJ/ContestProblem.aspx?cid=16&amp;amp;id=410&quot;&gt;http://icpc.ahu.edu.cn/OJ/ContestProblem.aspx?cid=16&amp;amp;id=410&lt;/a&gt;&lt;br&gt;参考了 &lt;a href=&quot;http://www.cnblogs.com/kaima/p/4773908.html&quot;&gt;http://www.cnblogs.com/kaima/p/4773908.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;外部的 while 循环检查 number 是否到 N * N, 如果 N 为偶数则可以在这里停下, (最后四个位置刚好填完)&lt;br&gt;里面第一个 if 检查奇数 N 的情况(会填充剩下一个位置)&lt;/p&gt;
&lt;p&gt;然后开始填充数组, 调节 x y 的坐标值填充一圈蛇形, 一圈后 x y 回归原点&lt;br&gt;缩小 size 变量&lt;br&gt;x+1, y+1 跳入内圈重复以上步骤又填充一圈, 直至跳出 while 循环&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/打印蛇形数组/snake.jpg&quot; alt=&quot;x y 走向&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码如下&lt;br&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>日剧《我与明星的99日》</title>
    <link href="http://dd3.org/2016/03/29/%E6%97%A5%E5%89%A7%E3%80%8A%E6%88%91%E4%B8%8E%E6%98%8E%E6%98%9F%E7%9A%8499%E6%97%A5%E3%80%8B/"/>
    <id>http://dd3.org/2016/03/29/日剧《我与明星的99日》/</id>
    <published>2016-03-29T11:19:49.000Z</published>
    <updated>2016-03-29T11:31:41.000Z</updated>
    
    <content type="html">&lt;p&gt;剧情没什么营养, 诡异的日韩混血剧, 不过金泰熙好漂亮。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;剧情没什么营养, 诡异的日韩混血剧, 不过金泰熙好漂亮。&lt;/p&gt;

    
    </summary>
    
      <category term="Drama" scheme="http://dd3.org/categories/Drama/"/>
    
    
      <category term="日剧" scheme="http://dd3.org/tags/%E6%97%A5%E5%89%A7/"/>
    
      <category term="金泰熙" scheme="http://dd3.org/tags/%E9%87%91%E6%B3%B0%E7%86%99/"/>
    
  </entry>
  
  <entry>
    <title>韩剧《未生》</title>
    <link href="http://dd3.org/2016/03/28/%E9%9F%A9%E5%89%A7%E3%80%8A%E6%9C%AA%E7%94%9F%E3%80%8B/"/>
    <id>http://dd3.org/2016/03/28/韩剧《未生》/</id>
    <published>2016-03-28T12:48:47.000Z</published>
    <updated>2016-03-29T11:27:36.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;未生、完生&quot;&gt;未生、完生&lt;/h3&gt;&lt;p&gt;一年内断断续续的看完了这部剧, 第一次看到『未生』这词完全想不到什么意思, 其实这是个韩国的围棋术语。『未生』对应『完生』, 完生其实就是双眼活棋, 未生就借喻职场新人了。&lt;/p&gt;
&lt;p&gt;不同于某些套题作文剧, 是有共鸣在, 这励志鸡汤熬得不错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/韩剧《未生》/未生.jpg&quot; alt=&quot;《未生》剧照&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;未生、完生&quot;&gt;未生、完生&lt;/h3&gt;&lt;p&gt;一年内断断续续的看完了这部剧, 第一次看到『未生』这词完全想不到什么意思, 其实这是个韩国的围棋术语。『未生』对应『完生』, 完生其实就是双眼活棋, 未生就借喻职场新人了。&lt;/p&gt;
&lt;p&gt;不同于某些套题作文剧, 是有共鸣在,
    
    </summary>
    
      <category term="Drama" scheme="http://dd3.org/categories/Drama/"/>
    
    
      <category term="围棋" scheme="http://dd3.org/tags/%E5%9B%B4%E6%A3%8B/"/>
    
      <category term="未生" scheme="http://dd3.org/tags/%E6%9C%AA%E7%94%9F/"/>
    
      <category term="韩剧" scheme="http://dd3.org/tags/%E9%9F%A9%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>非基于比较的排序算法</title>
    <link href="http://dd3.org/2016/03/21/%E9%9D%9E%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E6%8E%92%E5%BA%8F/"/>
    <id>http://dd3.org/2016/03/21/非基于比较排序/</id>
    <published>2016-03-21T15:42:16.000Z</published>
    <updated>2016-03-28T13:24:28.000Z</updated>
    
    <content type="html">&lt;p&gt;计数排序(Counting Sort)、桶排序、基数排序三个已经有不少很好的博客文章介绍，但不自己尝试描述一遍就难以熟悉，权当记录。&lt;/p&gt;
&lt;p&gt;参考了 &lt;a href=&quot;http://www.cnblogs.com/ttltry-air/archive/2012/08/04/2623302.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计数排序，基数排序和桶排序&lt;/a&gt; 和 &lt;a href=&quot;https://www.byvoid.com/blog/sort-radix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三种线性排序算法 计数排序、桶排序与基数排序&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;计数排序&quot;&gt;计数排序&lt;/h3&gt;&lt;p&gt;首先是主要的步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备线性表字典 Dict[], 其长度 m 是待排序元素的范围, 换言之每个待排序的元素都能在这个字典找到对应的位置&lt;/li&gt;
&lt;li&gt;扫描长度为 n 的待排序表 Unordered[], 把每个元素的出现次数记录在 Dict 里&lt;/li&gt;
&lt;li&gt;现在 Dict 记录着每个元素的的出现次数, 而 Dict 本身是有序的&lt;/li&gt;
&lt;li&gt;给 Dict 做累加, Dict[i] += Dict[i - 1] for i in 1 to m, &lt;/li&gt;
&lt;li&gt;累加后字典的值指定了元素排序后的位置，反向遍历待排序的A, 结合指定了元素位置的字典C 则可生成有序结果, 而反向遍历的元素会放在更后的位置, 这特性确保这是稳定排序&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C 语言例子&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *A, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\t&quot;&lt;/span&gt;, A[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CountingSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *A, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *C, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *Order)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Original Data: \n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PrintArray(A, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// initialize Dict&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// memset(C, 0, m * sizeof(m)); 这行居然导致代码着色失效, 不用括号包着 m 则问题解决，着实诡异。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(C, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, m * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// counting element of A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        C[A[i]]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Dict: Before Accumulate\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PrintArray(C, m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// scan C, accumulate,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 累加后, C 字典里的值就是 元素有序后的位置, 因为每次取得和占用位置后应该减一, 使用字典C 逆遍历A 就可以保持稳定而有序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; m; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        C[i] += C[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Dict: After Accumulate\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PrintArray(C, m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// reverse filling result, stable sort&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Order[C[A[i]]] = A[i]; &lt;span class=&quot;comment&quot;&gt;// 根据字典 C 得知 A[i] 的位置（累加后的C 的值x : 前面有x个值比我小 )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        C[A[i]]--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Sorted Array:\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PrintArray(Order, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; K = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// maximum in range, size of C&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// size of A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; A[N] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; C[K + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; Order[N]; &lt;span class=&quot;comment&quot;&gt;// result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        A[i] = rand() % K;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CountingSort(A, N, C, K, Order);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;桶排序_(Bucket_Sort)&quot;&gt;桶排序 (Bucket Sort)&lt;/h3&gt;&lt;p&gt;观看 &lt;a href=&quot;http://www.cs.usfca.edu/~galles/visualization/BucketSort.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BucketSort Visualization&lt;/a&gt; 后, 感觉桶排序就像散列表，然后加入了顺序的想法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;过程与计数排序的部分步骤相近, 建立 Dict 字典用以储存元素的出现情况, Dict 其实可以是线性表或者散列表, 看需求; 而本来在计数排序中的计数步骤这里则类似是散列表的 Chaining&lt;/li&gt;
&lt;li&gt;对字典项的 Chaining 进行排序, 字典是有序的, Chaining 也变成有序, 扫描一次把元素读出来就完成排序了&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;基数排序_(Radix_Sort)&quot;&gt;基数排序 (Radix Sort)&lt;/h3&gt;&lt;p&gt;假设是10 进制数&lt;br&gt;主要思想是, 把整数按数位分割, 然后就可以对一列个位数 key 进行稳定排序, from least significant to most significant digit.&lt;/p&gt;
&lt;p&gt;一列个位数的排序就当然是使用上面的非基于比较的排序方式啦, 按十进制数来说, 每次计数排序就需要10个坑来计数&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extract_digit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; place, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; base = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i / (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;built_in&quot;&gt;pow&lt;/span&gt;(base, place) % base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CountingSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v, &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;tmp, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; place)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; BASE = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; C[BASE] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; v.size(); ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d = extract_digit(v[i], place);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        C[d]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; BASE; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        C[i] += C[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = v.size() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d = extract_digit(v[i], place);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tmp[C[d] - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = v[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        C[d]--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v.swap(tmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RadixSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &amp;amp;v, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; element_max_width = &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; tmp (v.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; place = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; place &amp;lt; element_max_width; ++place)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CountingSort(v, tmp, place);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;计数排序(Counting Sort)、桶排序、基数排序三个已经有不少很好的博客文章介绍，但不自己尝试描述一遍就难以熟悉，权当记录。&lt;/p&gt;
&lt;p&gt;参考了 &lt;a href=&quot;http://www.cnblogs.com/ttltry-air/archive/2012/08/04/2623302.html&quot;&gt;计数排序，基数排序和桶排序&lt;/a&gt; 和 &lt;a href=&quot;https://www.byvoid.com/blog/sort-radix&quot;&gt;三种线性排序算法 计数排序、桶排序与基数排序&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
      <category term="排序" scheme="http://dd3.org/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>最近看的剧</title>
    <link href="http://dd3.org/2016/03/11/%E6%9C%80%E8%BF%91%E7%9C%8B%E7%9A%84%E5%89%A7/"/>
    <id>http://dd3.org/2016/03/11/最近看的剧/</id>
    <published>2016-03-11T13:35:11.000Z</published>
    <updated>2016-03-29T11:27:42.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/img/最近看的剧/rewalkinpark.jpg&quot; alt=&quot;如晴天似雨天&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;电影&quot;&gt;电影&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Like Sunday Like Rain&lt;/strong&gt;&lt;br&gt;剧情轻松、吸引、感人、画面唯美、女主漂亮&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向阳处的她&lt;/strong&gt;&lt;br&gt;刷上野树里系列之一，初恋的感觉，女主漂亮&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;恐怖直播&lt;/strong&gt;&lt;br&gt;低成本紧凑紧张悬疑故事，的确无尿点但并不能说很吸引&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;老男孩&lt;/strong&gt;&lt;br&gt;吸引、悬疑、人性、情色、暴力&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大叔&lt;/strong&gt;&lt;br&gt;特工剧，动作、剧情安排都不错，喜爱特工题材的推荐特工经典《谍影重重》&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;热血警探&lt;/strong&gt;&lt;br&gt;打发时间、喜剧，带上爆谷可乐休息一下吧&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;盗钥匙的方法&lt;/strong&gt;&lt;br&gt;打发时间、喜剧，良伴于无眠之夜&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;电视剧&quot;&gt;电视剧&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Dr.伦太郎&lt;/strong&gt;&lt;br&gt;堺雅人/苍井优，关于精神健康，每个人都有病系列，整体还不错，女主母亲演得杠杠的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;胜者即正义 Legal High&lt;/strong&gt;&lt;br&gt;堺雅人/新垣结衣，喜剧，它的信条看你信不信了，打发时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;求婚大作战&lt;/strong&gt;&lt;br&gt;山下智久/长泽雅美，貌似当年在内地也是热潮，初恋的感觉&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后的朋友&lt;/strong&gt;&lt;br&gt;围绕几个同伴关系的故事，男主暴力时间得快进，好评，女二神演技&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交响情人梦&lt;/strong&gt;&lt;br&gt;玉木宏/上野树里，如果可以接受这种风格的话，电视剧要和SP 一起看了才完整，女主神演技&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;家族的形式&lt;/strong&gt;&lt;br&gt;香取慎吾/上野树里，还在连载中，就是个电视剧，我就是去看女主的，一集突然就看完了，不知道什么吸引就被吸引了&lt;br&gt;刚刚完结，好评&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;琅琊榜&lt;/strong&gt;&lt;br&gt;胡歌，国产良心，就是集数有点多，只是故事长了变成打发时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;太阳的后裔&lt;/strong&gt;&lt;br&gt;宋钟基/宋慧乔，还在连载中，已经是近年韩国爱情剧最好，所谓”势均力敌”的爱情&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;秘密花园&lt;/strong&gt;&lt;br&gt;可算当年第一套韩剧，难免有些俗套剧情，但整体安排很不错，那种一见钟情，中段吸引，后段感人&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/最近看的剧/rewalkinpark.jpg&quot; alt=&quot;如晴天似雨天&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;电影&quot;&gt;电影&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Like Sunday Like Rain&lt;/strong&gt;&lt;br&gt;剧情轻松、吸引、感人、画面唯美、女主漂亮&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向阳处的她&lt;/strong&gt;&lt;br&gt;刷上野树里系列之一，初恋的感觉，女主漂亮&lt;br&gt;
    
    </summary>
    
      <category term="Drama" scheme="http://dd3.org/categories/Drama/"/>
    
    
  </entry>
  
  <entry>
    <title>the lost honour of christopher jefferies</title>
    <link href="http://dd3.org/2015/12/19/the-lost-honour-of-christopher-jefferies/"/>
    <id>http://dd3.org/2015/12/19/the-lost-honour-of-christopher-jefferies/</id>
    <published>2015-12-19T15:17:57.000Z</published>
    <updated>2016-03-29T11:27:56.000Z</updated>
    
    <content type="html">&lt;p&gt;剧情、人物、画面、节奏、配乐皆好&lt;/p&gt;
&lt;p&gt;主角是个纯粹( with honour )的人，与之对比的是大众和媒体的『正常』&lt;/p&gt;
&lt;p&gt;没有典型的紧张紧凑，自然就引人投入&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;剧情、人物、画面、节奏、配乐皆好&lt;/p&gt;
&lt;p&gt;主角是个纯粹( with honour )的人，与之对比的是大众和媒体的『正常』&lt;/p&gt;
&lt;p&gt;没有典型的紧张紧凑，自然就引人投入&lt;/p&gt;

    
    </summary>
    
      <category term="Drama" scheme="http://dd3.org/categories/Drama/"/>
    
    
  </entry>
  
  <entry>
    <title>捣腾博客的中文字体</title>
    <link href="http://dd3.org/2015/09/26/%E6%8D%A3%E8%85%BE%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93/"/>
    <id>http://dd3.org/2015/09/26/捣腾博客的中文字体/</id>
    <published>2015-09-26T13:12:51.000Z</published>
    <updated>2015-12-19T15:57:46.000Z</updated>
    
    <content type="html">&lt;p&gt;中文字体文件体积巨大，通常站长并不会把完整的中文字体文件加入网站当中&lt;/p&gt;
&lt;p&gt;如果想给中文内容套上一个漂亮的字体，现在似乎做法是使用 &lt;a href=&quot;http://ecomfe.github.io/fontmin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fontmin&lt;/a&gt; 生成一个字体文件子集来解决体积过大的问题&lt;/p&gt;
&lt;p&gt;首先用正则 [\u4e00-\u9fa5] 匹配出所有 HTML 文件的中文字符&lt;/p&gt;
&lt;p&gt;然后使用 fontmin 生成只包含用到的字符，体积就会小很多&lt;/p&gt;
&lt;p&gt;嗯，写个脚本搞成一个命令，然后加到博客生成的过程中就易用多了  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;中文字体文件体积巨大，通常站长并不会把完整的中文字体文件加入网站当中&lt;/p&gt;
&lt;p&gt;如果想给中文内容套上一个漂亮的字体，现在似乎做法是使用 &lt;a href=&quot;http://ecomfe.github.io/fontmin/&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
      <category term="Tech Notes" scheme="http://dd3.org/categories/Tech-Notes/"/>
    
    
  </entry>
  
</feed>
